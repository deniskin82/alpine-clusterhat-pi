#!/bin/sh

set -xe

TMPCLUSTERHAT=/tmp/clusterhat
TMPUSBBOOT=/tmp/usbboot
WORKDIR=$(dirname -- $0)

# install extra pkgs
apk add --no-cache libusb-dev util-linux-misc usbutils nfs-utils
apk add --no-cache py3-pip py3-usb py3-smbus
apk add --no-cache -Uu --virtual .build-dependencies python3-dev libffi-dev openssl-dev build-base musl git

# install RPi.GPIO library from source, issue Solved: https://forum.manjaro.org/t/pip-install-rpi-gpio-fail/25788
# https://github.com/woahbase/alpine-rpigpio/blob/master/Dockerfile_aarch64
env CFLAGS="-fcommon" pip3 install --no-cache --upgrade pyserial RPi.GPIO

ln -sf /usr/bin/python3 /usr/bin/python

mkdir -p /usr/share/clusterctrl/ /etc/default/ /var/lib/clusterctrl/boot

ln -sf /var/lib/clusterctrl /var/lib/clusterhat
ln -sf /boot/bootcode.bin /var/lib/clusterctrl/boot/bootcode.bin

git clone https://github.com/burtyb/clusterhat-image.git $TMPCLUSTERHAT

cp $TMPCLUSTERHAT/files/usr/sbin/* /usr/sbin/
cp $TMPCLUSTERHAT/files/usr/share/clusterctrl/default-clusterctrl /etc/default/clusterctrl
cp $TMPCLUSTERHAT/files/etc/udev/rules.d/90-clusterctrl.rules /etc/udev/rules.d/
cp -r $TMPCLUSTERHAT/files/usr/share/clusterctrl /usr/share/
echo 'TYPE=c' >> /etc/default/clusterctrl
cd -

rc-update -a del nfs | true

# Setup NFS exports for NFSROOT
for P in `awk 'BEGIN {for (i = 1; i <= 252; ++i) print i }' | xargs`; do
 echo "/var/lib/clusterctrl/nfs/p$P 172.19.180.$P(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
 mkdir -p "/var/lib/clusterctrl/nfs/p$P"
done

# test it as root
# udevadm trigger /dev/gpiomem
cp ${WORKDIR}/files/etc/udev/rules.d/99-gpiomem.rules /etc/udev/rules.d/99-gpiomem.rules
cp ${WORKDIR}/files/etc/udev/rules.d/99-com.rules /etc/udev/rules.d/99-com.rules

# Allow root login from serial.
echo ttyS0 >> /etc/securetty
echo ttyGS0 >> /etc/securetty
# Make sure the USB virtual serial device is available.
echo g_serial >> /etc/modules
# Make sure wireless networking is available.
echo 8723bs >> /etc/modules
# These enable the USB virtual serial device, and the standard serial
# pins to both be used as TTYs
echo ttyS0::respawn:/sbin/getty -L ttyS0 115200 vt102 >> /etc/inittab
echo ttyGS0::respawn:/sbin/getty -L ttyGS0 115200 vt102 >> /etc/inittab

# pull rpi-update scripts
wget -q --show-progress --progress=bar:force:noscroll --continue \
  -P /usr/bin/ \
  https://raw.githubusercontent.com/raspberrypi/rpi-update/master/rpi-update \
  https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/master/rpi-eeprom-config \
  https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/master/rpi-eeprom-update

wget -q --show-progress --progress=bar:force:noscroll --continue \
  -O /etc/default/rpi-eeprom-update \
  https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/master/rpi-eeprom-update-default

chmod -v +x /usr/bin/rpi-*

# compile usbboot/rpiboot
git clone https://github.com/raspberrypi/usbboot.git $TMPUSBBOOT
cd $TMPUSBBOOT
cat <<EOF > $TMPUSBBOOT/main.c.diff
diff --git a/main.c b/main.c
index 1732afa..b5e9212 100644
--- a/main.c
+++ b/main.c
@@ -11,9 +11,10 @@
 #include "msd/start4.h"

 /* Assume BSD without native fmemopen() if doesn't seem to be glibc */
-#if defined(__APPLE__) || (!defined(_GNU_SOURCE) && (!defined(_POSIX_C_SOURCE) || _POSIX_C_SOURCE < 200809L))
+/* #if defined(__APPLE__) || (!defined(_GNU_SOURCE) && (!defined(_POSIX_C_SOURCE) || _POSIX_C_SOURCE < 200809L))
 #include "fmemopen.c" // BSD fmemopen() compat in terms of funopen()
 #endif
+*/

 int signed_boot = 0;
 int verbose = 0;

EOF
patch -i main.c.diff
make
make install
cd -

# cleanup
rm -rfv $TMPCLUSTERHAT $TMPUSBBOOT
apk del --purge .build-dependencies build-base
apk add --no-cache --purge curl ca-certificates musl wiringpi
